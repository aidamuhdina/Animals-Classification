# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LSc2liu1B5Y6SfbQWBNiZNdommVW37-m
"""

import os

base_dir = '/content/drive/MyDrive/Colab machine learning/Project Deployment/Animals 5'
list_animals = os.listdir(base_dir)
print(list_animals)

from PIL import Image

total_dataset = 0
for animals in list_animals:
  dir = os.path.join(base_dir, animals)
  total_img = len(os.listdir(dir))
  print(animals + ': ' + str(total_img))
  total_dataset = total_dataset + total_img

  img_name = os.listdir(dir)
  for i in range(4):
    img = Image.open(dir + '/' + img_name[i])
    print('-' + str(img.size))
  print('------------')

print('\nTotal Dataset : ', total_dataset)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest',
                    validation_split = 0.2)
 
val_datagen = ImageDataGenerator(
                    rescale=1./255,
                    fill_mode='nearest',
                    validation_split = 0.2)

my_batch_size = 32
train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=(200,200),
    batch_size=my_batch_size,
    shuffle=True,
    subset='training',
    class_mode='categorical')

val_generator = val_datagen.flow_from_directory(
    base_dir,
    target_size=(200, 200),
    batch_size=my_batch_size,
    subset='validation',
    class_mode='categorical')

import tensorflow as tf
from tensorflow.keras.layers import Input
from tensorflow.keras.applications import ResNet152V2

model = tf.keras.models.Sequential([
    ResNet152V2(weights='imagenet', include_top=False, input_tensor=Input(shape=(200,200,3))),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(5, activation='softmax')])
model.layers[0].trainable = False

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(learning_rate=1.0000e-06),
              metrics=['accuracy'])

#membuat kelas callback untuk menghentikan training
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if logs.get('accuracy')>=0.95 and logs.get('val_accuracy')>=0.95:
      self.model.stop_training = True
      accuracy = float(logs.get('accuracy'))*100
      val_accuracy = float(logs.get('val_accuracy'))*100
      print("reached %.2f%% accuracy and %.2f%% val_accuracy" %(accuracy, val_accuracy))

callback = myCallback()

# from tensorflow.keras.callbacks import EarlyStopping

# early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=3)

history = model.fit(
    train_generator,
    epochs=30,
    validation_data=val_generator,
    verbose=1,
    callbacks=[callback])

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

#plot accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

#plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# # Konversi model ke tflite
# converter = tf.lite.TFLiteConverter.from_keras_model(model)
# tflite_model = converter.convert()

# #menyimpan model
# with tf.io.gfile.GFile('model.tflite', 'wb') as f:
#   f.write(tflite_model)